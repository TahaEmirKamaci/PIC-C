CCS PCM C Compiler, Version 5.007, 61971               27-May-24 15:58

               Filename:   C:\Users\Bengi\Desktop\uygulamalar\Mikroiþlemciler\ultrasonik\main.lst

               ROM used:   1130 words (14%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           37 (10%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3D4
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,10
000D:  DATA CD,32
000E:  DATA F3,30
000F:  DATA E6,32
0010:  DATA A0,1E
0011:  DATA A0,12
0012:  DATA 2E,19
0013:  DATA 66,10
0014:  DATA 6D,00
*
00AF:  MOVLW  8E
00B0:  MOVWF  77
00B1:  MOVF   27,W
00B2:  MOVWF  78
00B3:  MOVF   26,W
00B4:  MOVWF  79
00B5:  CLRF   7A
00B6:  MOVF   78,F
00B7:  BTFSS  03.2
00B8:  GOTO   0C3
00B9:  MOVF   79,W
00BA:  MOVWF  78
00BB:  CLRF   79
00BC:  MOVLW  08
00BD:  SUBWF  77,F
00BE:  MOVF   78,F
00BF:  BTFSS  03.2
00C0:  GOTO   0C3
00C1:  CLRF   77
00C2:  GOTO   0CB
00C3:  BCF    03.0
00C4:  BTFSC  78.7
00C5:  GOTO   0CA
00C6:  RLF    79,F
00C7:  RLF    78,F
00C8:  DECF   77,F
00C9:  GOTO   0C3
00CA:  BCF    78.7
00CB:  BCF    0A.3
00CC:  BCF    0A.4
00CD:  GOTO   415 (RETURN)
00CE:  MOVF   33,W
00CF:  BTFSC  03.2
00D0:  GOTO   13E
00D1:  MOVWF  3B
00D2:  MOVF   37,W
00D3:  BTFSC  03.2
00D4:  GOTO   13E
00D5:  ADDWF  3B,F
00D6:  BTFSC  03.0
00D7:  GOTO   0DF
00D8:  MOVLW  7F
00D9:  SUBWF  3B,F
00DA:  BTFSS  03.0
00DB:  GOTO   13E
00DC:  BTFSC  03.2
00DD:  GOTO   13E
00DE:  GOTO   0E3
00DF:  MOVLW  81
00E0:  ADDWF  3B,F
00E1:  BTFSC  03.0
00E2:  GOTO   13E
00E3:  MOVF   3B,W
00E4:  MOVWF  77
00E5:  CLRF   78
00E6:  CLRF   79
00E7:  CLRF   7A
00E8:  MOVF   34,W
00E9:  MOVWF  3F
00EA:  BSF    3F.7
00EB:  MOVF   35,W
00EC:  MOVWF  3E
00ED:  MOVF   36,W
00EE:  MOVWF  3D
00EF:  MOVLW  18
00F0:  MOVWF  3B
00F1:  CLRF   3C
00F2:  BTFSS  3D.0
00F3:  GOTO   10C
00F4:  MOVF   3A,W
00F5:  ADDWF  7A,F
00F6:  BTFSS  03.0
00F7:  GOTO   0FE
00F8:  INCF   79,F
00F9:  BTFSS  03.2
00FA:  GOTO   0FE
00FB:  INCF   78,F
00FC:  BTFSC  03.2
00FD:  BSF    3C.7
00FE:  MOVF   39,W
00FF:  ADDWF  79,F
0100:  BTFSS  03.0
0101:  GOTO   105
0102:  INCF   78,F
0103:  BTFSC  03.2
0104:  BSF    3C.7
0105:  MOVF   38,W
0106:  MOVWF  35
0107:  BSF    35.7
0108:  MOVF   35,W
0109:  ADDWF  78,F
010A:  BTFSC  03.0
010B:  BSF    3C.7
010C:  RLF    3C,F
010D:  RRF    78,F
010E:  RRF    79,F
010F:  RRF    7A,F
0110:  RRF    3F,F
0111:  RRF    3E,F
0112:  RRF    3D,F
0113:  BCF    03.0
0114:  DECFSZ 3B,F
0115:  GOTO   0F1
0116:  MOVLW  01
0117:  ADDWF  77,F
0118:  BTFSC  03.0
0119:  GOTO   13E
011A:  BTFSC  78.7
011B:  GOTO   123
011C:  RLF    3F,F
011D:  RLF    7A,F
011E:  RLF    79,F
011F:  RLF    78,F
0120:  DECF   77,F
0121:  BTFSC  03.2
0122:  GOTO   13E
0123:  BTFSS  3F.7
0124:  GOTO   134
0125:  INCF   7A,F
0126:  BTFSS  03.2
0127:  GOTO   134
0128:  INCF   79,F
0129:  BTFSS  03.2
012A:  GOTO   134
012B:  INCF   78,F
012C:  BTFSS  03.2
012D:  GOTO   134
012E:  RRF    78,F
012F:  RRF    79,F
0130:  RRF    7A,F
0131:  INCF   77,F
0132:  BTFSC  03.2
0133:  GOTO   13E
0134:  MOVF   34,W
0135:  MOVWF  3C
0136:  MOVF   38,W
0137:  XORWF  3C,F
0138:  BTFSS  3C.7
0139:  GOTO   13C
013A:  BSF    78.7
013B:  GOTO   142
013C:  BCF    78.7
013D:  GOTO   142
013E:  CLRF   77
013F:  CLRF   78
0140:  CLRF   79
0141:  CLRF   7A
0142:  RETURN
0143:  MOVF   2A,W
0144:  BTFSC  03.2
0145:  GOTO   208
0146:  MOVWF  36
0147:  MOVF   2E,W
0148:  BTFSC  03.2
0149:  GOTO   208
014A:  SUBWF  36,F
014B:  BTFSS  03.0
014C:  GOTO   152
014D:  MOVLW  7F
014E:  ADDWF  36,F
014F:  BTFSC  03.0
0150:  GOTO   208
0151:  GOTO   158
0152:  MOVLW  81
0153:  SUBWF  36,F
0154:  BTFSS  03.0
0155:  GOTO   208
0156:  BTFSC  03.2
0157:  GOTO   208
0158:  MOVF   36,W
0159:  MOVWF  77
015A:  CLRF   78
015B:  CLRF   79
015C:  CLRF   7A
015D:  CLRF   35
015E:  MOVF   2B,W
015F:  MOVWF  34
0160:  BSF    34.7
0161:  MOVF   2C,W
0162:  MOVWF  33
0163:  MOVF   2D,W
0164:  MOVWF  32
0165:  MOVLW  19
0166:  MOVWF  36
0167:  MOVF   31,W
0168:  SUBWF  32,F
0169:  BTFSC  03.0
016A:  GOTO   17B
016B:  MOVLW  01
016C:  SUBWF  33,F
016D:  BTFSC  03.0
016E:  GOTO   17B
016F:  SUBWF  34,F
0170:  BTFSC  03.0
0171:  GOTO   17B
0172:  SUBWF  35,F
0173:  BTFSC  03.0
0174:  GOTO   17B
0175:  INCF   35,F
0176:  INCF   34,F
0177:  INCF   33,F
0178:  MOVF   31,W
0179:  ADDWF  32,F
017A:  GOTO   1AD
017B:  MOVF   30,W
017C:  SUBWF  33,F
017D:  BTFSC  03.0
017E:  GOTO   196
017F:  MOVLW  01
0180:  SUBWF  34,F
0181:  BTFSC  03.0
0182:  GOTO   196
0183:  SUBWF  35,F
0184:  BTFSC  03.0
0185:  GOTO   196
0186:  INCF   35,F
0187:  INCF   34,F
0188:  MOVF   30,W
0189:  ADDWF  33,F
018A:  MOVF   31,W
018B:  ADDWF  32,F
018C:  BTFSS  03.0
018D:  GOTO   1AD
018E:  INCF   33,F
018F:  BTFSS  03.2
0190:  GOTO   1AD
0191:  INCF   34,F
0192:  BTFSS  03.2
0193:  GOTO   1AD
0194:  INCF   35,F
0195:  GOTO   1AD
0196:  MOVF   2F,W
0197:  IORLW  80
0198:  SUBWF  34,F
0199:  BTFSC  03.0
019A:  GOTO   1AC
019B:  MOVLW  01
019C:  SUBWF  35,F
019D:  BTFSC  03.0
019E:  GOTO   1AC
019F:  INCF   35,F
01A0:  MOVF   2F,W
01A1:  IORLW  80
01A2:  ADDWF  34,F
01A3:  MOVF   30,W
01A4:  ADDWF  33,F
01A5:  BTFSS  03.0
01A6:  GOTO   18A
01A7:  INCF   34,F
01A8:  BTFSS  03.2
01A9:  GOTO   18A
01AA:  INCF   35,F
01AB:  GOTO   18A
01AC:  BSF    7A.0
01AD:  DECFSZ 36,F
01AE:  GOTO   1B0
01AF:  GOTO   1BB
01B0:  BCF    03.0
01B1:  RLF    32,F
01B2:  RLF    33,F
01B3:  RLF    34,F
01B4:  RLF    35,F
01B5:  BCF    03.0
01B6:  RLF    7A,F
01B7:  RLF    79,F
01B8:  RLF    78,F
01B9:  RLF    37,F
01BA:  GOTO   167
01BB:  BTFSS  37.0
01BC:  GOTO   1C3
01BD:  BCF    03.0
01BE:  RRF    78,F
01BF:  RRF    79,F
01C0:  RRF    7A,F
01C1:  RRF    37,F
01C2:  GOTO   1C6
01C3:  DECF   77,F
01C4:  BTFSC  03.2
01C5:  GOTO   208
01C6:  BTFSC  37.7
01C7:  GOTO   1EF
01C8:  BCF    03.0
01C9:  RLF    32,F
01CA:  RLF    33,F
01CB:  RLF    34,F
01CC:  RLF    35,F
01CD:  MOVF   31,W
01CE:  SUBWF  32,F
01CF:  BTFSC  03.0
01D0:  GOTO   1DB
01D1:  MOVLW  01
01D2:  SUBWF  33,F
01D3:  BTFSC  03.0
01D4:  GOTO   1DB
01D5:  SUBWF  34,F
01D6:  BTFSC  03.0
01D7:  GOTO   1DB
01D8:  SUBWF  35,F
01D9:  BTFSS  03.0
01DA:  GOTO   1FE
01DB:  MOVF   30,W
01DC:  SUBWF  33,F
01DD:  BTFSC  03.0
01DE:  GOTO   1E6
01DF:  MOVLW  01
01E0:  SUBWF  34,F
01E1:  BTFSC  03.0
01E2:  GOTO   1E6
01E3:  SUBWF  35,F
01E4:  BTFSS  03.0
01E5:  GOTO   1FE
01E6:  MOVF   2F,W
01E7:  IORLW  80
01E8:  SUBWF  34,F
01E9:  BTFSC  03.0
01EA:  GOTO   1EF
01EB:  MOVLW  01
01EC:  SUBWF  35,F
01ED:  BTFSS  03.0
01EE:  GOTO   1FE
01EF:  INCF   7A,F
01F0:  BTFSS  03.2
01F1:  GOTO   1FE
01F2:  INCF   79,F
01F3:  BTFSS  03.2
01F4:  GOTO   1FE
01F5:  INCF   78,F
01F6:  BTFSS  03.2
01F7:  GOTO   1FE
01F8:  INCF   77,F
01F9:  BTFSC  03.2
01FA:  GOTO   208
01FB:  RRF    78,F
01FC:  RRF    79,F
01FD:  RRF    7A,F
01FE:  MOVF   2B,W
01FF:  MOVWF  36
0200:  MOVF   2F,W
0201:  XORWF  36,F
0202:  BTFSS  36.7
0203:  GOTO   206
0204:  BSF    78.7
0205:  GOTO   20C
0206:  BCF    78.7
0207:  GOTO   20C
0208:  CLRF   77
0209:  CLRF   78
020A:  CLRF   79
020B:  CLRF   7A
020C:  BCF    0A.3
020D:  BCF    0A.4
020E:  GOTO   43C (RETURN)
*
024D:  MOVF   0B,W
024E:  MOVWF  27
024F:  BCF    0B.7
0250:  BSF    03.5
0251:  BSF    03.6
0252:  BSF    0C.7
0253:  BSF    0C.0
0254:  NOP
0255:  NOP
0256:  BTFSC  03.0
0257:  GOTO   27F
0258:  BCF    03.5
0259:  MOVF   0C,W
025A:  ANDLW  7F
025B:  BCF    03.6
025C:  MOVWF  28
025D:  BSF    03.6
025E:  MOVF   0D,W
025F:  BCF    03.6
0260:  MOVWF  29
0261:  BSF    03.6
0262:  MOVF   0F,W
0263:  BCF    03.6
0264:  MOVWF  2A
0265:  MOVF   28,W
0266:  MOVWF  33
0267:  CALL   221
0268:  MOVF   29,W
0269:  BSF    03.6
026A:  MOVWF  0D
026B:  BCF    03.6
026C:  MOVF   2A,W
026D:  BSF    03.6
026E:  MOVWF  0F
026F:  BSF    03.5
0270:  BSF    0C.7
0271:  BSF    0C.0
0272:  NOP
0273:  NOP
0274:  BCF    03.5
0275:  BCF    03.6
0276:  DECFSZ 26,F
0277:  GOTO   279
0278:  GOTO   27C
0279:  BSF    03.5
027A:  BSF    03.6
027B:  GOTO   27F
027C:  GOTO   29E
027D:  BSF    03.5
027E:  BSF    03.6
027F:  BCF    03.5
0280:  RLF    0C,W
0281:  RLF    0E,W
0282:  ANDLW  7F
0283:  BCF    03.6
0284:  MOVWF  28
0285:  BSF    03.6
0286:  MOVF   0D,W
0287:  BCF    03.6
0288:  MOVWF  29
0289:  BSF    03.6
028A:  MOVF   0F,W
028B:  BCF    03.6
028C:  MOVWF  2A
028D:  MOVF   28,W
028E:  MOVWF  33
028F:  CALL   221
0290:  MOVF   29,W
0291:  BSF    03.6
0292:  MOVWF  0D
0293:  BCF    03.6
0294:  MOVF   2A,W
0295:  BSF    03.6
0296:  MOVWF  0F
0297:  INCF   0D,F
0298:  BTFSC  03.2
0299:  INCF   0F,F
029A:  BCF    03.0
029B:  BCF    03.6
029C:  DECFSZ 26,F
029D:  GOTO   250
029E:  BTFSC  27.7
029F:  BSF    0B.7
02A0:  BCF    0A.3
02A1:  BCF    0A.4
02A2:  GOTO   44E (RETURN)
02A3:  BTFSC  03.1
02A4:  GOTO   2A8
02A5:  MOVLW  3B
02A6:  MOVWF  04
02A7:  BCF    03.7
02A8:  CLRF   77
02A9:  CLRF   78
02AA:  CLRF   79
02AB:  CLRF   7A
02AC:  CLRF   3B
02AD:  CLRF   3C
02AE:  CLRF   3D
02AF:  CLRF   3E
02B0:  MOVF   3A,W
02B1:  IORWF  39,W
02B2:  IORWF  38,W
02B3:  IORWF  37,W
02B4:  BTFSC  03.2
02B5:  GOTO   2E6
02B6:  MOVLW  20
02B7:  MOVWF  3F
02B8:  BCF    03.0
02B9:  RLF    33,F
02BA:  RLF    34,F
02BB:  RLF    35,F
02BC:  RLF    36,F
02BD:  RLF    3B,F
02BE:  RLF    3C,F
02BF:  RLF    3D,F
02C0:  RLF    3E,F
02C1:  MOVF   3A,W
02C2:  SUBWF  3E,W
02C3:  BTFSS  03.2
02C4:  GOTO   2CF
02C5:  MOVF   39,W
02C6:  SUBWF  3D,W
02C7:  BTFSS  03.2
02C8:  GOTO   2CF
02C9:  MOVF   38,W
02CA:  SUBWF  3C,W
02CB:  BTFSS  03.2
02CC:  GOTO   2CF
02CD:  MOVF   37,W
02CE:  SUBWF  3B,W
02CF:  BTFSS  03.0
02D0:  GOTO   2E0
02D1:  MOVF   37,W
02D2:  SUBWF  3B,F
02D3:  MOVF   38,W
02D4:  BTFSS  03.0
02D5:  INCFSZ 38,W
02D6:  SUBWF  3C,F
02D7:  MOVF   39,W
02D8:  BTFSS  03.0
02D9:  INCFSZ 39,W
02DA:  SUBWF  3D,F
02DB:  MOVF   3A,W
02DC:  BTFSS  03.0
02DD:  INCFSZ 3A,W
02DE:  SUBWF  3E,F
02DF:  BSF    03.0
02E0:  RLF    77,F
02E1:  RLF    78,F
02E2:  RLF    79,F
02E3:  RLF    7A,F
02E4:  DECFSZ 3F,F
02E5:  GOTO   2B8
02E6:  MOVF   3B,W
02E7:  MOVWF  00
02E8:  INCF   04,F
02E9:  MOVF   3C,W
02EA:  MOVWF  00
02EB:  INCF   04,F
02EC:  MOVF   3D,W
02ED:  MOVWF  00
02EE:  INCF   04,F
02EF:  MOVF   3E,W
02F0:  MOVWF  00
02F1:  RETURN
02F2:  MOVF   04,W
02F3:  MOVWF  2B
02F4:  MOVF   2A,W
02F5:  MOVWF  2D
02F6:  BTFSC  03.2
02F7:  GOTO   311
02F8:  MOVF   29,W
02F9:  MOVWF  36
02FA:  MOVF   28,W
02FB:  MOVWF  35
02FC:  MOVF   27,W
02FD:  MOVWF  34
02FE:  MOVF   26,W
02FF:  MOVWF  33
0300:  CLRF   3A
0301:  CLRF   39
0302:  MOVLW  20
0303:  MOVWF  38
0304:  MOVLW  82
0305:  MOVWF  37
0306:  CALL   0CE
0307:  MOVF   7A,W
0308:  MOVWF  29
0309:  MOVF   79,W
030A:  MOVWF  28
030B:  MOVF   78,W
030C:  MOVWF  27
030D:  MOVF   77,W
030E:  MOVWF  26
030F:  DECFSZ 2D,F
0310:  GOTO   2F8
0311:  MOVF   29,W
0312:  MOVWF  36
0313:  MOVF   28,W
0314:  MOVWF  35
0315:  MOVF   27,W
0316:  MOVWF  34
0317:  MOVF   26,W
0318:  MOVWF  33
0319:  MOVF   33,W
031A:  SUBLW  B6
031B:  MOVWF  33
031C:  CLRF   7A
031D:  MOVF   34,W
031E:  MOVWF  37
031F:  BSF    34.7
0320:  BCF    03.0
0321:  RRF    34,F
0322:  RRF    35,F
0323:  RRF    36,F
0324:  RRF    7A,F
0325:  RRF    79,F
0326:  RRF    78,F
0327:  RRF    77,F
0328:  DECFSZ 33,F
0329:  GOTO   320
032A:  BTFSS  37.7
032B:  GOTO   337
032C:  COMF   77,F
032D:  COMF   78,F
032E:  COMF   79,F
032F:  COMF   7A,F
0330:  INCF   77,F
0331:  BTFSC  03.2
0332:  INCF   78,F
0333:  BTFSC  03.2
0334:  INCF   79,F
0335:  BTFSC  03.2
0336:  INCF   7A,F
0337:  MOVF   7A,W
0338:  MOVWF  29
0339:  MOVF   79,W
033A:  MOVWF  28
033B:  MOVF   78,W
033C:  MOVWF  27
033D:  MOVF   77,W
033E:  MOVWF  26
033F:  BTFSS  29.7
0340:  GOTO   34E
0341:  DECF   2B,F
0342:  BSF    2B.5
0343:  COMF   26,F
0344:  COMF   27,F
0345:  COMF   28,F
0346:  COMF   29,F
0347:  INCF   26,F
0348:  BTFSC  03.2
0349:  INCF   27,F
034A:  BTFSC  03.2
034B:  INCF   28,F
034C:  BTFSC  03.2
034D:  INCF   29,F
034E:  MOVLW  3B
034F:  MOVWF  32
0350:  MOVLW  9A
0351:  MOVWF  31
0352:  MOVLW  CA
0353:  MOVWF  30
0354:  CLRF   2F
0355:  MOVLW  0A
0356:  MOVWF  2D
0357:  MOVF   2A,W
0358:  BTFSC  03.2
0359:  INCF   2B,F
035A:  BSF    03.1
035B:  MOVLW  26
035C:  MOVWF  04
035D:  BCF    03.7
035E:  MOVF   29,W
035F:  MOVWF  36
0360:  MOVF   28,W
0361:  MOVWF  35
0362:  MOVF   27,W
0363:  MOVWF  34
0364:  MOVF   26,W
0365:  MOVWF  33
0366:  MOVF   32,W
0367:  MOVWF  3A
0368:  MOVF   31,W
0369:  MOVWF  39
036A:  MOVF   30,W
036B:  MOVWF  38
036C:  MOVF   2F,W
036D:  MOVWF  37
036E:  CALL   2A3
036F:  MOVF   78,W
0370:  MOVF   77,F
0371:  BTFSS  03.2
0372:  GOTO   386
0373:  INCF   2A,W
0374:  SUBWF  2D,W
0375:  BTFSC  03.2
0376:  GOTO   386
0377:  MOVF   2B,W
0378:  BTFSC  03.2
0379:  GOTO   388
037A:  ANDLW  0F
037B:  SUBWF  2D,W
037C:  BTFSC  03.2
037D:  GOTO   380
037E:  BTFSC  03.0
037F:  GOTO   3B8
0380:  BTFSC  2B.7
0381:  GOTO   3B8
0382:  BTFSC  2B.6
0383:  GOTO   388
0384:  MOVLW  20
0385:  GOTO   3B4
0386:  MOVLW  20
0387:  ANDWF  2B,F
0388:  BTFSS  2B.5
0389:  GOTO   396
038A:  BCF    2B.5
038B:  MOVF   2A,W
038C:  BTFSS  03.2
038D:  DECF   2B,F
038E:  MOVF   77,W
038F:  MOVWF  2B
0390:  MOVLW  2D
0391:  MOVWF  33
0392:  CALL   221
0393:  MOVF   2B,W
0394:  MOVWF  77
0395:  CLRF   2B
0396:  MOVF   2A,W
0397:  SUBWF  2D,W
0398:  BTFSS  03.2
0399:  GOTO   3A4
039A:  MOVF   77,W
039B:  MOVWF  2B
039C:  MOVLW  2E
039D:  MOVWF  33
039E:  CALL   221
039F:  MOVF   2B,W
03A0:  MOVWF  77
03A1:  MOVLW  20
03A2:  ANDWF  2B,F
03A3:  MOVLW  00
03A4:  MOVLW  30
03A5:  BTFSS  2B.5
03A6:  GOTO   3B4
03A7:  BCF    2B.5
03A8:  MOVF   2A,W
03A9:  BTFSS  03.2
03AA:  DECF   2B,F
03AB:  MOVF   77,W
03AC:  MOVWF  2B
03AD:  MOVLW  2D
03AE:  MOVWF  33
03AF:  CALL   221
03B0:  MOVF   2B,W
03B1:  MOVWF  77
03B2:  CLRF   2B
03B3:  MOVLW  30
03B4:  ADDWF  77,F
03B5:  MOVF   77,W
03B6:  MOVWF  33
03B7:  CALL   221
03B8:  BCF    03.1
03B9:  MOVF   32,W
03BA:  MOVWF  36
03BB:  MOVF   31,W
03BC:  MOVWF  35
03BD:  MOVF   30,W
03BE:  MOVWF  34
03BF:  MOVF   2F,W
03C0:  MOVWF  33
03C1:  CLRF   3A
03C2:  CLRF   39
03C3:  CLRF   38
03C4:  MOVLW  0A
03C5:  MOVWF  37
03C6:  CALL   2A3
03C7:  MOVF   7A,W
03C8:  MOVWF  32
03C9:  MOVF   79,W
03CA:  MOVWF  31
03CB:  MOVF   78,W
03CC:  MOVWF  30
03CD:  MOVF   77,W
03CE:  MOVWF  2F
03CF:  DECFSZ 2D,F
03D0:  GOTO   35A
03D1:  BCF    0A.3
03D2:  BCF    0A.4
03D3:  GOTO   45B (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
*
0015:  MOVLW  34
0016:  MOVWF  04
0017:  BCF    03.7
0018:  MOVF   00,W
0019:  BTFSC  03.2
001A:  GOTO   029
001B:  MOVLW  01
001C:  MOVWF  78
001D:  CLRF   77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 78,F
0021:  GOTO   01D
0022:  MOVLW  4A
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  GOTO   027
0027:  DECFSZ 00,F
0028:  GOTO   01B
0029:  RETURN
.................... #use FIXED_IO( B_outputs=PIN_B0 ) 
.................... #use FIXED_IO( D_outputs=PIN_D7,PIN_D6,PIN_D5,PIN_D4,PIN_D3,PIN_D2,PIN_D1,PIN_D0 ) 
....................  
....................  
.................... #define use_portd_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0042:  MOVLW  0F
0043:  BSF    03.5
0044:  ANDWF  08,W
0045:  IORLW  F0
0046:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0047:  BCF    03.5
0048:  BSF    08.2
....................    delay_cycles(1); 
0049:  NOP
....................    lcd_output_enable(1); 
004A:  BSF    08.0
....................    delay_cycles(1); 
004B:  NOP
....................    high = lcd_read_nibble(); 
004C:  CALL   036
004D:  MOVF   78,W
004E:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
004F:  BCF    08.0
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BSF    08.0
....................    delay_us(1); 
0052:  NOP
....................    low = lcd_read_nibble(); 
0053:  CALL   036
0054:  MOVF   78,W
0055:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
0056:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0057:  MOVLW  0F
0058:  BSF    03.5
0059:  ANDWF  08,W
005A:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005B:  BCF    03.5
005C:  SWAPF  3B,W
005D:  MOVWF  77
005E:  MOVLW  F0
005F:  ANDWF  77,F
0060:  MOVF   77,W
0061:  IORWF  3A,W
0062:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0036:  MOVF   08,W
0037:  MOVWF  77
0038:  SWAPF  08,W
0039:  ANDLW  0F
003A:  MOVWF  78
....................   #endif 
003B:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002A:  SWAPF  3B,W
002B:  ANDLW  F0
002C:  MOVWF  77
002D:  MOVLW  0F
002E:  ANDWF  08,W
002F:  IORWF  77,W
0030:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0031:  NOP
....................    lcd_output_enable(1); 
0032:  BSF    08.0
....................    delay_us(2); 
0033:  GOTO   034
....................    lcd_output_enable(0); 
0034:  BCF    08.0
0035:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003C:  BSF    03.5
003D:  BCF    08.0
....................    lcd_rs_tris(); 
003E:  BCF    08.1
....................    lcd_rw_tris(); 
003F:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0040:  BCF    03.5
0041:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0063:  MOVF   78,W
0064:  MOVWF  3A
0065:  BTFSC  3A.7
0066:  GOTO   042
....................    lcd_output_rs(address); 
0067:  BTFSS  38.0
0068:  BCF    08.1
0069:  BTFSC  38.0
006A:  BSF    08.1
....................    delay_cycles(1); 
006B:  NOP
....................    lcd_output_rw(0); 
006C:  BCF    08.2
....................    delay_cycles(1); 
006D:  NOP
....................    lcd_output_enable(0); 
006E:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006F:  SWAPF  39,W
0070:  MOVWF  3A
0071:  MOVLW  0F
0072:  ANDWF  3A,F
0073:  MOVF   3A,W
0074:  MOVWF  3B
0075:  CALL   02A
....................    lcd_send_nibble(n & 0xf); 
0076:  MOVF   39,W
0077:  ANDLW  0F
0078:  MOVWF  3A
0079:  MOVWF  3B
007A:  CALL   02A
007B:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007C:  MOVLW  0F
007D:  BSF    03.5
007E:  ANDWF  08,W
007F:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0080:  BCF    08.0
....................    lcd_rs_tris(); 
0081:  BCF    08.1
....................    lcd_rw_tris(); 
0082:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0083:  BCF    03.5
0084:  BCF    08.1
....................    lcd_output_rw(0); 
0085:  BCF    08.2
....................    lcd_output_enable(0); 
0086:  BCF    08.0
....................      
....................    delay_ms(15); 
0087:  MOVLW  0F
0088:  MOVWF  34
0089:  CALL   015
....................    for(i=1;i<=3;++i) 
008A:  MOVLW  01
008B:  MOVWF  26
008C:  MOVF   26,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   098
....................    { 
....................        lcd_send_nibble(3); 
0090:  MOVLW  03
0091:  MOVWF  3B
0092:  CALL   02A
....................        delay_ms(5); 
0093:  MOVLW  05
0094:  MOVWF  34
0095:  CALL   015
0096:  INCF   26,F
0097:  GOTO   08C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0098:  MOVLW  02
0099:  MOVWF  3B
009A:  CALL   02A
....................    delay_ms(5); 
009B:  MOVLW  05
009C:  MOVWF  34
009D:  CALL   015
....................    for(i=0;i<=3;++i) 
009E:  CLRF   26
009F:  MOVF   26,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AC
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A3:  MOVF   26,W
00A4:  CALL   004
00A5:  MOVWF  27
00A6:  CLRF   38
00A7:  MOVF   27,W
00A8:  MOVWF  39
00A9:  CALL   03C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AA:  INCF   26,F
00AB:  GOTO   09F
00AC:  BCF    0A.3
00AD:  BCF    0A.4
00AE:  GOTO   3E6 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
020F:  DECFSZ 35,W
0210:  GOTO   212
0211:  GOTO   215
....................       address=LCD_LINE_TWO; 
0212:  MOVLW  40
0213:  MOVWF  36
0214:  GOTO   216
....................    else 
....................       address=0; 
0215:  CLRF   36
....................       
....................    address+=x-1; 
0216:  MOVLW  01
0217:  SUBWF  34,W
0218:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
0219:  MOVF   36,W
021A:  IORLW  80
021B:  MOVWF  37
021C:  CLRF   38
021D:  MOVF   37,W
021E:  MOVWF  39
021F:  CALL   03C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0220:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0221:  MOVF   33,W
0222:  XORLW  07
0223:  BTFSC  03.2
0224:  GOTO   22F
0225:  XORLW  0B
0226:  BTFSC  03.2
0227:  GOTO   234
0228:  XORLW  06
0229:  BTFSC  03.2
022A:  GOTO   23C
022B:  XORLW  02
022C:  BTFSC  03.2
022D:  GOTO   242
022E:  GOTO   247
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
022F:  MOVLW  01
0230:  MOVWF  34
0231:  MOVWF  35
0232:  CALL   20F
0233:  GOTO   24C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0234:  CLRF   38
0235:  MOVLW  01
0236:  MOVWF  39
0237:  CALL   03C
....................                      delay_ms(2); 
0238:  MOVLW  02
0239:  MOVWF  34
023A:  CALL   015
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
023B:  GOTO   24C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
023C:  MOVLW  01
023D:  MOVWF  34
023E:  MOVLW  02
023F:  MOVWF  35
0240:  CALL   20F
0241:  GOTO   24C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0242:  CLRF   38
0243:  MOVLW  10
0244:  MOVWF  39
0245:  CALL   03C
0246:  GOTO   24C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0247:  MOVLW  01
0248:  MOVWF  38
0249:  MOVF   33,W
024A:  MOVWF  39
024B:  CALL   03C
....................      #endif 
....................    } 
024C:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int16 zaman; 
.................... float x; 
.................... void main() 
*
03D4:  BSF    03.5
03D5:  BSF    1F.0
03D6:  BSF    1F.1
03D7:  BSF    1F.2
03D8:  BCF    1F.3
03D9:  MOVLW  07
03DA:  MOVWF  1C
03DB:  BCF    03.7
03DC:  MOVLW  1F
03DD:  ANDWF  03,F
.................... { 
....................    set_tris_d(0x00); 
03DE:  MOVLW  00
03DF:  MOVWF  08
....................    output_d(0x00); 
03E0:  CLRF   08
03E1:  BCF    03.5
03E2:  CLRF   08
....................     
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);      //65,5 ms overflow 
03E3:  MOVLW  85
03E4:  MOVWF  10
....................  
....................    lcd_init(); 
03E5:  GOTO   07C
....................     
....................    while(TRUE) 
....................    { 
....................       //Trigger yapma 
....................       output_high(pin_B0); 
03E6:  MOVLW  FE
03E7:  BSF    03.5
03E8:  MOVWF  06
03E9:  BCF    03.5
03EA:  BSF    06.0
....................       delay_us(15); 
03EB:  MOVLW  04
03EC:  MOVWF  77
03ED:  DECFSZ 77,F
03EE:  GOTO   3ED
03EF:  GOTO   3F0
....................       output_low(pin_B0); 
03F0:  MOVLW  FE
03F1:  BSF    03.5
03F2:  MOVWF  06
03F3:  BCF    03.5
03F4:  BCF    06.0
....................        
....................       while(input(pin_B4) == 0); //dinle 
03F5:  MOVLW  FE
03F6:  BSF    03.5
03F7:  MOVWF  06
03F8:  BCF    03.5
03F9:  BTFSS  06.4
03FA:  GOTO   3F5
....................       set_timer1(0); 
03FB:  CLRF   0E
03FC:  CLRF   0F
03FD:  CLRF   0E
....................       while(input(pin_B4) == 1); 
03FE:  MOVLW  FE
03FF:  BSF    03.5
0400:  MOVWF  06
0401:  BCF    03.5
0402:  BTFSC  06.4
0403:  GOTO   3FE
....................       zaman = get_timer1(); 
0404:  MOVF   0F,W
0405:  MOVWF  7A
0406:  MOVF   0E,W
0407:  MOVWF  77
0408:  MOVF   0F,W
0409:  SUBWF  7A,W
040A:  BTFSS  03.2
040B:  GOTO   404
040C:  MOVF   77,W
040D:  MOVWF  20
040E:  MOVF   7A,W
040F:  MOVWF  21
....................       x = ((0.00034) * zaman)/2;  // sesin mikrosaniyedeki hýzý = 0.00034 
0410:  MOVF   21,W
0411:  MOVWF  27
0412:  MOVF   20,W
0413:  MOVWF  26
0414:  GOTO   0AF
0415:  MOVLW  07
0416:  MOVWF  36
0417:  MOVLW  42
0418:  MOVWF  35
0419:  MOVLW  32
041A:  MOVWF  34
041B:  MOVLW  73
041C:  MOVWF  33
041D:  MOVF   7A,W
041E:  MOVWF  3A
041F:  MOVF   79,W
0420:  MOVWF  39
0421:  MOVF   78,W
0422:  MOVWF  38
0423:  MOVF   77,W
0424:  MOVWF  37
0425:  CALL   0CE
0426:  MOVF   7A,W
0427:  MOVWF  29
0428:  MOVF   79,W
0429:  MOVWF  28
042A:  MOVF   78,W
042B:  MOVWF  27
042C:  MOVF   77,W
042D:  MOVWF  26
042E:  MOVF   7A,W
042F:  MOVWF  2D
0430:  MOVF   79,W
0431:  MOVWF  2C
0432:  MOVF   78,W
0433:  MOVWF  2B
0434:  MOVF   77,W
0435:  MOVWF  2A
0436:  CLRF   31
0437:  CLRF   30
0438:  CLRF   2F
0439:  MOVLW  80
043A:  MOVWF  2E
043B:  GOTO   143
043C:  MOVF   7A,W
043D:  MOVWF  25
043E:  MOVF   79,W
043F:  MOVWF  24
0440:  MOVF   78,W
0441:  MOVWF  23
0442:  MOVF   77,W
0443:  MOVWF  22
....................       printf(lcd_putc,"\f Mesafe = %.2f m", x); 
0444:  MOVLW  0C
0445:  BSF    03.6
0446:  MOVWF  0D
0447:  MOVLW  00
0448:  MOVWF  0F
0449:  BCF    03.0
044A:  MOVLW  0B
044B:  BCF    03.6
044C:  MOVWF  26
044D:  GOTO   24D
044E:  MOVLW  89
044F:  MOVWF  04
0450:  MOVF   25,W
0451:  MOVWF  29
0452:  MOVF   24,W
0453:  MOVWF  28
0454:  MOVF   23,W
0455:  MOVWF  27
0456:  MOVF   22,W
0457:  MOVWF  26
0458:  MOVLW  02
0459:  MOVWF  2A
045A:  GOTO   2F2
045B:  MOVLW  20
045C:  MOVWF  33
045D:  CALL   221
045E:  MOVLW  6D
045F:  MOVWF  33
0460:  CALL   221
....................       delay_ms(500); 
0461:  MOVLW  02
0462:  MOVWF  26
0463:  MOVLW  FA
0464:  MOVWF  34
0465:  CALL   015
0466:  DECFSZ 26,F
0467:  GOTO   463
0468:  GOTO   3E6
....................        
....................    } 
....................  
.................... } 
0469:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
